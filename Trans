--//-------------- SERVICES ----------------//*
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local InputService = game:GetService('UserInputService')
local RunService = game:GetService('RunService')
local ContentProvider = game:GetService("ContentProvider")

--//*--------- GLOBAL VARIABLES -----------//*
local ScriptIsCurrentlyBusy = false
local Character = nil
local Humanoid = nil
local HumanoidRootPart = nil
local CurrentWorld = ""
local CurrentPosition = nil






local Webhook_Daycare = true
LocalPlayer.CharacterAdded:Connect(function(char) 
	Character = char
	Humanoid = Character:WaitForChild("Humanoid")
	HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
end)



	local automaticFunctionsSection = automationTab:CreateSection("Automatic Functions", false)
	local enableAutoDaycare = false
	local autodaycareButton = automationTab:CreateToggle({
		Name = "Auto Daycare",
		CurrentValue = false,
		Flag = "Automation_AutoDaycare",
		SectionParent = automaticFunctionsSection,
		Callback = function(Value) 
			enableAutoDaycare = Value
			
			if Value then 
				CreateReminder()
			end
		end
	})



	local AUTODAYCARE_OTHER_GAMEMODES = false -- CHANGE THIS TO TRUE IF YOU WANT TO AUTO-COLLECT/ENROLL BOTH NORMAL AND HARDCORE GAMEMODES 
	local TRY_TO_TELEPORT_SAME_SERVER = true -- If auto-daycare is enabled for both gamemodes, this option will TRY teleport you back to the same server that you were before



	local DAYCARE_WORLD = "Spawn"
	local DAYCARE_POSITION = Vector3.new(35, 110, 40)
	local PetsToDaycare = {}

	local DaycareGUI = Library.GUI.Daycare;

	local DISCORD_EMOTES = {
		["Diamonds"] = "<:e:1062469796341497887>",
		["Triple Coins"] = "<:e:1082130777355079800>",
		["Triple Damage"] = "<:e:1082130816261443674>",
		["Super Lucky"] = "<:e:1082130793880621167>",
		["Ultra Lucky"] = "<:e:1082130805914079313>"
	}

	local COIN_EMOTE = "<:e:1087199766401794168>"
	local PET_EMOTE = "<:e:1083222082533462098>"

	local AUTODAYCARE_SETTINGS_FOLDER = "AutoDaycare"
	local AUTODAYCARE_SETTINGS_FILE = "SaveData"

	function SaveSettings() 
		pcall(function() 
			if not isfolder(AUTODAYCARE_SETTINGS_FOLDER) then
				makefolder(AUTODAYCARE_SETTINGS_FOLDER)
			end
			
			local fileData = {}
			
			if CurrentWorld and CurrentWorld ~= "" then 
				fileData.World = CurrentWorld
			end
			
			if CurrentPosition and CurrentPosition ~= nil then 
				fileData.Position = CurrentPosition
			end
			
			fileData.GameMode = "normal"
			if Library.Shared.IsHardcore then 
				fileData.GameMode = "hardcore"
			end
			
			writefile(AUTODAYCARE_SETTINGS_FOLDER .. "/" .. AUTODAYCARE_SETTINGS_FILE .. ".json", tostring(HttpService:JSONEncode(fileData)))
		end)
	end

	local IsTeleporting = false
	function LoadSettings() 
		pcall(function()
			if isfile(AUTODAYCARE_SETTINGS_FOLDER .. "/" .. AUTODAYCARE_SETTINGS_FILE .. ".json") then
				local saveData = readfile(AUTODAYCARE_SETTINGS_FOLDER .. "/" .. AUTODAYCARE_SETTINGS_FILE .. ".json")
				local save = HttpService:JSONDecode(saveData)
				
				if not save.GameMode or save.GameMode == "" then return end
				
				local shouldTeleport = false
				if save.World and save.World ~= "" then
					CurrentWorld = save.World
					shouldTeleport = true
				end
				
				if save.Position and save.Position ~= nil then
					CurrentPosition = save.Position
					shouldTeleport = true
				end
				
				local gamemode = "normal"
				if Library.Shared.IsHardcore then 
					gamemode = "hardcore"
				end
				
				if save.GameMode ~= gamemode then return end
				
				if shouldTeleport then 
					IsTeleporting = true
					TeleportBack()
					IsTeleporting = false
				end
			end
		end)
	end

	function SendWebhookInfo(quantity, loots)
		if not Webhook_Enabled or not Webhook_Daycare or not Webhook_URL or Webhook_URL == "" then return end

		local gamemode = "[NORMAL]"
		if Library.Shared.IsHardcore then 
			gamemode = "[HARDCORE]"
		end
		
		local lootString = ""
		
		local ContainsPet = false
		for _, loot in pairs(loots) do 
			local selectedEmote = ""
			if DISCORD_EMOTES[loot.Data] then 
				selectedEmote = DISCORD_EMOTES[loot.Data]
			elseif loot.Category == "Currency" then
				selectedEmote = COIN_EMOTE
			elseif loot.Category == "Pet" then
				ContainsPet = true
				selectedEmote = PET_EMOTE
			end
			
			lootString = lootString .. selectedEmote .. " " .. Library.Functions.NumberShorten(loot.Min) .. " **" .. loot.Data .. "**\n" 
		end

		local embed = {
				["title"] = "Daycare has been collected! " .. gamemode,
				["description"] = "Successfully collected **".. tostring(quantity) .."** pets from daycare!",
				["color"] = tonumber(0x90ff90),

				["fields"] = {
					{
						["name"] = "Collected Loot",
						["value"] = lootString,
						["inline"] = false
					}
				},
				["footer"] = {
					["text"] = "Pet Simulator X",
					["icon_url"] = "https://i.imgur.com/pWIzvzD.png"
				}
			}
			
		(syn and syn.request or http_request or http.request) {
			Url = Webhook_URL;
			Method = 'POST';
			Headers = {
				['Content-Type'] = 'application/json';
			};
			Body = HttpService:JSONEncode({
				username = "Daycare Update", 
				avatar_url = 'https://i.imgur.com/pWIzvzD.png',
				embeds = {embed} 
			})
		}
	end


	function TeleportToDaycare()
		CurrentWorld = Library.WorldCmds.Get()
		
		
		CurrentPosition = HumanoidRootPart.CFrame
		task.wait()
		
		-- Go to Spawn World
		if CurrentWorld ~= DAYCARE_WORLD then
			Library.WorldCmds.Load(DAYCARE_WORLD)
		end

		HumanoidRootPart.CFrame = CFrame.new(DAYCARE_POSITION) 
	end

	function SendNotification(msg, options)
		if not options then
			options = {
				time = 10,
				color = Color3.fromRGB(160, 30, 245),
				force = true
			}
		end

		Library.Signal.Fire("Notification", msg, options)
	end

	function ErrorNotification(msg) 
		SendNotification(msg, {
			time = 10, color = Color3.fromRGB(255, 60, 60), force = true
		})
	end

	local BoostIcons = {
		["Triple Coins"] = "rbxassetid://7402604552", 
		["Triple Damage"] = "rbxassetid://7402604431", 
		["Super Lucky"] = "rbxassetid://7402604677", 
		["Ultra Lucky"] = "rbxassetid://7402706511"
	}

	function CollectDaycare()
		local saving = Library.Save.Get()
		if not saving then 
			ErrorNotification("Something went wrong! Try re-logging!")
			return
		end
		
		local success, errorMsg, pets, loots, queue = Library.Network.Invoke("Daycare: Claim", nil)
		if not success then
			return false, (errorMsg and "Can't claim, unknown error!")
		end

		if loots then 
			
			for _, loot in pairs(loots) do
				-- print (tostring(loot.Category) .. ": " .. tostring(loot.Min) .. "x " .. tostring(loot.Data) )
				-- Quantity: loot.Min
				if loot.Category == "Currency" then 
					-- CurrencyIcon: Library.Directory.Currency[loot.Data].tinyImage;	
				elseif loot.Category == "Boost" then
					-- BoostIcon = BoostIcon[loot.Data]
				elseif loot.Category == "Pet" then
					local petData = loot.Data;
					
					-- Open Huge Egg
					if petData.id ~= "1019" then
						Library.Signal.Fire("Open Egg", "Huge Machine Egg 1", { petData });
					end
				end
			end
			
		end
		
		if queue then
			if Library.Shared.IsHardcore then
				saving.DaycareHardcoreQueue = queue;
			else
				saving.DaycareQueue = queue;
			end
			
			-- Remove pets that isn't ready yet
			
			for _, pet in pairs(queue) do
				if pet["Pet"] and pet["Pet"].uid then
					local tablePos = table.find(PetsToDaycare, pet["Pet"].uid)
					if tablePos then
						-- print("A pet was not ready yet!")
						table.remove(PetsToDaycare, tablePos)
					end
				end
			end
			
		end
		
		SendWebhookInfo(#PetsToDaycare, loots)

		return true, nil
	end

	function PutPetsInDaycare()
		local saving = Library.Save.Get()
		local success, errorMsg, _ = Library.Network.Invoke("Daycare: Enroll", PetsToDaycare)
		if not success then
			return false, (errorMsg and "Can't enroll pets, unknown error!")
		end

		print(tostring(#PetsToDaycare) .. " pets have been put on daycare!")
		task.wait(1)
		
		Library.Signal.Fire("Stat Changed", "DaycareTier")
		Library.Signal.Fire("Window Closed", DaycareGUI.Gui)
		return true, nil
	end

	function CreateReminder()
		if getgenv().AutoDaycare then
			return 
		end
		
		local saving = Library.Save.Get()
		
		local queue = saving.DaycareQueue
		if Library.Shared.IsHardcore then
			queue = saving.DaycareHardcoreQueue
		end
		
		-- Check if queue isn't nil and queue lenght is more than 1 (pet)
		if queue ~= nil and #queue > 0 then	
			getgenv().AutoDaycare = true
			coroutine.wrap(function() 
				while true do
					local allPetsAreReady = true
					
					for _, pet in pairs(queue) do
						local remainingTime = Library.Shared.DaycareComputeRemainingTime(saving, pet)

						if remainingTime > 0 then
							allPetsAreReady = false
							break
						end

					end
					
					
					if allPetsAreReady or not enableAutoDaycare then break end
					task.wait(1)
				end
				
				getgenv().AutoDaycare = false
				
				if not enableAutoDaycare then return end
				if ScriptIsCurrentlyBusy then 
					while ScriptIsCurrentlyBusy do wait() end
					ScriptIsCurrentlyBusy = true
					wait(3)
				end
				
				ScriptIsCurrentlyBusy = true
				
				--if reminder then Library.Message.New("Your pets in daycare are ready to collect!") end
				
				PetsToDaycare = {}
				
				for _, pet in pairs(queue) do	
					local remainingTime = Library.Shared.DaycareComputeRemainingTime(saving, pet)

					if remainingTime <= 0 and pet["Pet"] and pet["Pet"].uid then
						table.insert(PetsToDaycare, pet["Pet"].uid)
					end
				end
				
				TeleportToDaycare()
				task.wait(1)
				
				local collected, collectError = CollectDaycare()
				if not collected then		
					ErrorNotification(collectError)
					ResetDaycare()
					return
				end
				
				task.wait(3)
				
				local enrollSuccess, enrollError = PutPetsInDaycare()
				if not enrollSuccess then
					ErrorNotification(enrollError)
					ResetDaycare()
					return
				end

				SendNotification("Successfully put pets in daycare!")
				ResetDaycare()
			end)()
		end
	end

	function TeleportBack()
		pcall(function() 
			-- Go to Spawn World
			if CurrentWorld ~= "" and Library.WorldCmds.Get() ~= CurrentWorld then
				Library.WorldCmds.Load(CurrentWorld)
			end
			CurrentWorld = ""
			
			if CurrentPosition then
				HumanoidRootPart.CFrame = CurrentPosition
			end
			CurrentPosition = nil
		end)
	end

	function ResetDaycare()
		TeleportBack()
		DaycareGUI.Categories.ViewPets.Frame.PetReady.Visible = false

		-- FIRE CLOSE CONNECTION
		for _, connection in pairs(getconnections(DaycareGUI.Close.Activated)) do 
			connection:Fire()
		end

		wait(3)
		ScriptIsCurrentlyBusy = false
	end

	Library.Signal.Fired("Stat Changed"):Connect(function(stat)
		if stat == "DaycareQueue" and enableAutoDaycare then
			CreateReminder()
		end
	end)
