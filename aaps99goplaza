local increment = 0
local Normal = true
move_time = 300
if not getgenv().booth_sell then
    getgenv().booth_sell = true
else
    getgenv().booth_sell = false
end
repeat wait() until game:IsLoaded()
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end
function TPReturner()
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Des&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Des&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if v.playing and tonumber(v.maxPlayers) > tonumber(v.playing) and tonumber(v.playing) >= 1 then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                end)
                wait(3)
            end
        end
    end
end

function Teleport2()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end
function Teleport()
    local PlaceId = Normal and 15502339080 or 15588442388
    game:GetService("TeleportService"):Teleport(PlaceId, game.Players.LocalPlayer)
end

if game.PlaceId == 8737899170 or game.PlaceId == 17503543197 or game.PlaceId == 16498369169 then
    Teleport()
    return
end

if game.PlaceId == 15502339080 or game.PlaceId == 15588442388 then
    repeat wait() until game:IsLoaded()

    if getgenv().booth_sell == false then
        if game.Players.LocalPlayer:WaitForChild("PlayerGui"):FindFirstChild("ListCounter") then
            game.Players.LocalPlayer:WaitForChild("PlayerGui"):FindFirstChild("ListCounter"):Destroy()
        end
    end
    local booth_func
    for i, v in getgc() do
        if type(v) == "function" and islclosure(v) and not isourclosure(v) then
            local script = tostring(getfenv(v).script)
            if script == "Booths Frontend" then
                local name = debug.info(v, "n")
                if name == "getByOwnerId" then
                    booth_func = v
                end
            end
        end
    end
    local total_booth_count = function()
        local claimed = {}
        for i,v in pairs(game.Players:GetChildren()) do
            booth = booth_func(v.UserId)
            if booth ~= nil then
                table.insert(claimed, tonumber(booth.BoothID))
            end
        end
        return #claimed
    end

    local curcheck = function(a)
        local value = 0
        for i,v in pairs(a) do
            if v.id == "Diamonds" and v._am ~= nil then
                value = v._am
            end
        end
        return value
    end

    local plr = game.Players.LocalPlayer
    local rs = game.ReplicatedStorage
    local Booths_ClaimBooth = rs.Network:WaitForChild("Booths_ClaimBooth")
    local petf = require(rs.Library.Directory.Pets)
    local numsho = require(game:GetService("ReplicatedStorage").Library.Functions.NumberShorten)
    local itemf = require(rs.Library.Items)
    local library = require(rs:WaitForChild("Library"))
    local v7 = game:GetService("ReplicatedStorage"):WaitForChild("Library")
    local v8 = v7:WaitForChild("Client")
    local v_u_10 = require(v8.TabController)
    local claim = function()
        local claimed = {}
        local boothsToClaim = {17, 16, 14, 13, 29, 25, 24, 28, 20, 15, 21}
        for i,v in pairs(game.Players:GetChildren()) do
            booth = booth_func(v.UserId)
            if booth ~= nil then
                table.insert(claimed, tonumber(booth.BoothID))
            end
        end
        for i,v in pairs(boothsToClaim) do
            if not table.find(claimed, v) then
                Booths_ClaimBooth:InvokeServer(tostring(v))
                print("Booth No: "..tostring(v).." Claimed")
                wait(2)
                break
            end
        end
    end
    claim()


    task.spawn(function()
        while getgenv().booth_sell and wait() do
            if total_booth_count() <= 10 then
                Teleport2()
            end
        end
    end)

    task.spawn(function()
        while getgenv().booth_sell and wait(move_time) do
            game.Players.LocalPlayer.Character:MoveTo(game.Players.LocalPlayer.Character:GetModelCFrame().Position + Vector3.new(0,0,1))
            task.wait()
            game.Players.LocalPlayer.Character:MoveTo(game.Players.LocalPlayer.Character:GetModelCFrame().Position + Vector3.new(0,0,-1))
        end
    end)
    
    if booth_func(plr.UserId) == nil then
        Teleport2()
        return
    end

    local booth_count = function(a)
        local booth_count = 0
        for i,v in pairs(a) do
            booth_count = booth_count + 1
        end
        return booth_count
    end

    local check_count = function(a, b)
        local count = 0
        for i,v in pairs(a) do
            if v.Item._data.id == b then
                count = count + 1
            end
        end
        return count
    end

    local c_add = function(a)
        -- local remainder = a % 100000
        -- return a + (100000 - remainder) + 99999
        return a
    end


    task.spawn(function()
        if not game.Players.LocalPlayer:WaitForChild("PlayerGui"):FindFirstChild("ListCounter") and getgenv().booth_sell == true then
            local ListCounter = Instance.new("ScreenGui")
            local ItemCount = Instance.new("Frame")
            local UICorner = Instance.new("UICorner")
            local value = Instance.new("TextLabel")
            local UIScale = Instance.new("UIScale")
            local diamond = Instance.new("TextLabel")
            local UICorner_2 = Instance.new("UICorner")

            ListCounter.Name = "ListCounter"
            ListCounter.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
            ListCounter.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
            ListCounter.DisplayOrder = 100

            ItemCount.Name = "ItemCount"
            ItemCount.Parent = ListCounter
            ItemCount.AnchorPoint = Vector2.new(0.5, 0)
            ItemCount.BackgroundColor3 = Color3.fromRGB(49, 183, 255)
            ItemCount.BorderColor3 = Color3.fromRGB(0, 0, 0)
            ItemCount.BorderSizePixel = 0
            ItemCount.Position = UDim2.new(0.5, 0, 0, 0)
            ItemCount.Size = UDim2.new(0, 250, 0, 230)

            UICorner.CornerRadius = UDim.new(0, 30)
            UICorner.Parent = ItemCount

            value.Name = "value"
            value.Parent = ItemCount
            value.BackgroundColor3 = Color3.fromRGB(49, 183, 255)
            value.BorderColor3 = Color3.fromRGB(0, 0, 0)
            value.BorderSizePixel = 0
            value.Position = UDim2.new(0, 50, 0, 8)
            value.Size = UDim2.new(0, 50, 0, 50)
            value.Font = Enum.Font.SourceSans
            value.Text = "0"
            value.TextColor3 = Color3.fromRGB(0, 0, 0)
            value.TextSize = 100.000

            UIScale.Parent = value
            UIScale.Scale = 3.000

            diamond.Name = "diamond"
            diamond.Parent = ItemCount
            diamond.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            diamond.BorderColor3 = Color3.fromRGB(0, 0, 0)
            diamond.Text = "0"
            diamond.BorderSizePixel = 0
            diamond.Position = UDim2.new(0.0960000008, 0, 0.760869563, 0)
            diamond.Size = UDim2.new(0, 204, 0, 55)
            diamond.Font = Enum.Font.Unknown
            diamond.TextColor3 = Color3.fromRGB(0, 0, 0)
            diamond.TextSize = 60.000

            UICorner_2.Parent = diamond

            v_u_10.OpenTab("Inventory")
            wait(.5)
            task.spawn(function()
                while task.wait(1) do
                    if diamond.Text ~= tostring(numsho(curcheck(library.Save.Get().Inventory.Currency))) then
                        diamond.Text = tostring(numsho(curcheck(library.Save.Get().Inventory.Currency)))
                    end
                end
            end)
            while task.wait(1) do
                booth = booth_func(plr.UserId)
                if booth ~= nil then
                    local count = 0
                    for i,v in pairs(booth.Listings) do
                        count = count+1
                    end
                    if value.Text ~= tostring(count) then
                        value.Text = tostring(count)
                    end
                end
            end
        else
            print("Counter Already Exist :>")
        end
    end)


    function AntiIdle()
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        local GC = getconnections or getsignal_cons
    
        if GC then
            -- Get the connections to the Idled event
            for i, v in pairs(GC(LocalPlayer.Idled)) do
                if v["Disable"] then
                    v["Disable"](v)
                elseif v["Disconnect"] then
                    v["Disconnect"](v)
                end
            end
        else
            local VirtualUser = Instance.new("VirtualUser")
            LocalPlayer.Idled:Connect(function()
                VirtualUser:CaptureController()
                VirtualUser:ClickButton2(Vector2.new())
            end)
        end
    end
    AntiIdle()
    task.spawn(function()
        while getgenv().booth_sell and wait() do
            local booth = booth_func(plr.UserId)
            if booth ~= nil and booth_count(booth.Listings) < library.Save.Get().BoothSlots then
                for i,v in pairs(library.Save.Get().Inventory.Pet) do
                    if v.id:match("Huge") and v._am ~= nil and check_count(booth.Listings, v.id) < v._am or v.id:match("Huge") and v._am == nil and check_count(booth.Listings, v.id) ~= 1 then
                        local pet = itemf.Pet(petf[v.id])
                        for i2,v2 in pairs(v) do
                            pet._data[i2] = v2
                        end
                        pet._data["_am"] = 1
                        if pet:GetDevRAP() >= 1000000 then
                            game:GetService("ReplicatedStorage").Network.Booths_CreateListing:InvokeServer(i, c_add(pet:GetDevRAP())+increment, 1)
                        else
                            game:GetService("ReplicatedStorage").Network.Booths_CreateListing:InvokeServer(i, pet:GetDevRAP()+increment, 1)
                        end
                        wait(.5)
                    end
                    if booth_count(booth_func(plr.UserId).Listings) == library.Save.Get().BoothSlots then
                        break
                    end
                end
            end
        end
    end)
    task.spawn(function()
        hugecount = 0
        for i,v in pairs(library.Save.Get().Inventory.Pet) do
            if v.id:match("Huge") and v._am ~= nil then
                hugecount = hugecount + tonumber(v._am)
            elseif v.id:match("Huge") and v._am == nil then
                hugecount = hugecount + 1
            end
        end
        if hugecount >= 5 and game.PlaceId ~= 15588442388 then
            game:GetService("TeleportService"):Teleport(15588442388, game.Players.LocalPlayer)
        elseif hugecount < 5 and game.PlaceId ~= 15502339080 then
            game:GetService("TeleportService"):Teleport(15502339080, game.Players.LocalPlayer)
        end
    end)
    print(getgenv().booth_sell)
end
